language: java
jdk:
    - openjdk6
env:
    global:
        # From http://stackoverflow.com/a/21841688
        - TERM=dumb
        # Deployment target for oxcross
        - MACOSX_DEPLOYMENT_TARGET=10.9
        - artifactory_user=jfly
        # Setting the artifactory_password env var
        - secure: "bsAUSuyK5j7CvTtuGhYZlvg3KIz7vQKtPVae7hkYfRbWUJRUs+XO/1KEYqZajVsBNTHItN6uTr64t5MF9PExYA0smJLtYzBGjrejlB1Z7V14d7+1mvqE1luI9OtrEG713v9UTGN4Pa5OXpHBvpJTcsT/ep6IkfkXcLVUF64JOwY="

before_install:
    # From http://stackoverflow.com/a/11069162
    - sudo apt-get -qy update
    - sudo apt-get -qy install aptitude

    # Install Emscripten
    # There is no package we can apt-get, so we have to compile it ourselves.
    # However, Emscripten takes quite some time to compile, so I did it once
    # on a 64 bit Ubuntu 12.04 VM, tar-ed up the relevant binaries, and
    # uploaded them to Dropbox. Here's how I generated those tar files.
    # vagrant@precise64:~/emsdk_portable$ cd /home/vagrant/emsdk_portable/emscripten/master/
    # vagrant@precise64:~/emsdk_portable/emscripten/master$ tar zcvf emscripten_ubuntu1204.tar.gz *
    # vagrant@precise64:~/emsdk_portable$ cd /home/vagrant/emsdk_portable/clang/fastcomp/build_master_64/bin/
    # vagrant@precise64:~/emsdk_portable/clang/fastcomp/build_master_64/bin$ tar zcvf fastcomp_ubuntu1204.tar.gz *

    - cp tools/.emscripten ~/.emscripten
    - wget https://dl.dropboxusercontent.com/u/1463845/osxcross/emscripten_ubuntu1204.tar.gz
    - wget https://dl.dropboxusercontent.com/u/1463845/osxcross/fastcomp_ubuntu1204.tar.gz
    - mkdir /tmp/em
    - tar xf emscripten_ubuntu1204.tar.gz -C /tmp/em
    - tar xf fastcomp_ubuntu1204.tar.gz -C /tmp/em
    - 'export PATH=$PATH:/tmp/em'
   
    # To compile 32-bit Linux binaries even though we're on 64 bit.
    - sudo aptitude install -y libc6-dev-i386 lib32stdc++6 gcc-multilib g++-multilib

    # To compile 32-bit and 64-bit Windows binaries.
    - sudo aptitude install -y g++-mingw-w64

    # To compile for OS X, we need osxcross.
    - git clone --depth=1 https://github.com/tpoechtrager/osxcross
    - cd osxcross
    - (cd tarballs; wget https://dl.dropboxusercontent.com/u/1463845/osxcross/MacOSX10.9.sdk.tar.bz2)
    - sudo tools/get_dependencies.sh
    - yes | ./build.sh
    - eval `target/bin/osxcross-env`
    - cd ..

    # Install swig3 so we can run tests
    # Copied from https://github.com/ilveroluca/rapi/commit/bc3d55b74f9d31fff5f5120b5e32a675b1934f1c
    #- sudo apt-get -qq install swig
    - sudo apt-get -qy install python3-dev
    - sudo apt-get -qy install libpcre3-dev
    - wget http://prdownloads.sourceforge.net/swig/swig-3.0.2.tar.gz -O - | tar xzf -
    - cd swig-3.0.2/
    - ./configure -prefix=$HOME --without-alllang --with-python
    - make -j 2
    - make install
    - cd ..
    - export PATH=$HOME/bin:$PATH

    # Install libclang python bindings for tools/c_to_emscripten.py
    - sudo apt-get -qy install libclang-dev
    # The python-clang-3.4 package has libclang-3.3.so hardcoded into it, so we
    # use pip's version instead.
    - sudo pip install clang==3.4.dev192547

install:
    # Disable default "./gradlew assemble" command.
    # See http://stackoverflow.com/a/23416671
    - true

script:
    # Run tests
    - ./gradlew -i test
    # Build a universal jar
    - ./gradlew -i jar
    # Build js using emscripten
    - ./gradlew -i js

after_success:
    # Publish to oss.jfrog.org if everything passed.
    - ./gradlew -i artifactoryPublish

after_failure:
    # Dump compiler options used.
    - tail +1 build/tmp/*/options.txt
